CREATE TABLE IF NOT EXISTS NODES (NODE_1 VARCHAR, NODE_2 VARCHAR, COST INTEGER);

INSERT INTO
	NODES (NODE_1, NODE_2, COST)
VALUES
	('d', 'a', 20),
	('a', 'd', 20),
	('d', 'c', 30),
	('c', 'd', 30),
	('b', 'd', 25),
	('d', 'b', 25),
	('a', 'b', 10),
	('b', 'a', 10),
	('a', 'c', 15),
	('c', 'a', 15),
	('b', 'c', 35),
	('c', 'b', 35);

WITH RECURSIVE
	RECURSIVE_QUERY AS (
		SELECT
			NODE_1 AS CURRENT,
			CAST('{' || NODE_1 AS VARCHAR) AS PATHS,
			0 AS TOTAL_COST,
			1 AS STEPS
		FROM
			NODES
		WHERE
			NODE_1 = 'a'
		UNION
		SELECT
			NODES.NODE_2 AS CURRENT,
			RECURSIVE_QUERY.PATHS || ',' || NODES.NODE_2,
			RECURSIVE_QUERY.TOTAL_COST + NODES.COST,
			RECURSIVE_QUERY.STEPS + 1
		FROM
			RECURSIVE_QUERY
			JOIN NODES ON RECURSIVE_QUERY.CURRENT = NODES.NODE_1
		WHERE
			RECURSIVE_QUERY.PATHS NOT LIKE '%' || NODES.NODE_2 || '%'
	),
	FINAL_TOUR AS (
		SELECT
			RECURSIVE_QUERY.TOTAL_COST + NODES.COST AS TOTAL_COST,
			RECURSIVE_QUERY.PATHS || ',' || NODES.NODE_2 || '}' AS TOUR
		FROM
			RECURSIVE_QUERY
			JOIN NODES ON RECURSIVE_QUERY.CURRENT = NODES.NODE_1
			AND NODES.NODE_2 = 'a'
		WHERE
			RECURSIVE_QUERY.STEPS = (
				SELECT
					COUNT(DISTINCT NODE_1)
				FROM
					NODES
			)
		ORDER BY
			TOTAL_COST,
			TOUR
	)
SELECT
	*
FROM
	FINAL_TOUR
WHERE
	TOTAL_COST = (
		SELECT
			MIN(TOTAL_COST)
		FROM
			FINAL_TOUR
	);